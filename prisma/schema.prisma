generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  adminId      String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model User {
  userId       String        @id @default(uuid())
  name         String
  email        String        @unique
  address      String?
  picture      String?
  phone        String?
  password     String
  isAttached   Boolean       @default(false)
  isDeleted    Boolean       @default(false)
  refreshToken String?
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model Package {
  packageId        String          @id @default(uuid())
  name             String
  description      String
  specifications   Specification[]
  installationCost Int
  image            String
  price            Int
  isActive         Boolean         @default(true)
  isDeleted        Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  transactions     Transaction[]
}

model Specification {
  specificationId String   @id @default(uuid())
  spec            String
  package         Package  @relation(fields: [packageId], references: [packageId], onDelete: Cascade, onUpdate: Cascade)
  packageId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model Transaction {
  transactionId   String    @id @default(uuid())
  userId          String
  packageId       String
  packageName     String
  totalPrice      Int
  itemPrice       Int       
  installationFee Int       
  overdueFee      Int       
  isPaid          Boolean   @default(false)
  isCancelled     Boolean   @default(false)
  snapTokenMT     String    @default("")
  redirectUrlMT   String    @default("")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  startedAt       DateTime?
  paidAt          DateTime?

  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  package Package @relation(fields: [packageId], references: [packageId], onDelete: Cascade, onUpdate: Cascade)
}

model Coverage {
  coverageId String   @id @default(uuid())
  location   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}
